function [y1] = myNeuralNetworkFunction22Nov2017(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Nov-2017 10:54:11.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [3.71000113824978;0;0;0.123940934398451;0;0.2;0.413419700274177;0.00506245836190202;-1.11883370564349;1.40763545293009];
x1_step1.gain = [0.145147953074238;0.872727272727273;1.03412208504801;0.886127539607146;0.918918918918919;1.44092088273696;0.415529048326595;2.14825542685948;0.301030917866412;0.0478717468633542];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.5708680011404974;-1.3656833911007378;2.0400887003848069;0.5286152475587228;0.17136588925211171;-0.55082735716752651;0.4127069207668122;1.6684788034601852;-1.6009506981291097;-0.37770464489507444];
IW1_1 = [1.2232227040316765 1.2842438676571997 1.0533520469991557 -0.3383173499743834 1.6830130128232543 -0.51853180755668038 1.6641647776354784 -0.86568534123497454 -2.8570799849496735 -1.5463101333919276;0.87596982053720618 -1.3998086823706797 0.21272533257319781 -0.10505385541492401 -1.7574902006864161 0.85284042993630871 0.1872586098219175 -0.646574213672373 0.42492703096830159 -1.1250192914959165;-0.53240707686335254 -0.92878795765731059 0.40414604963383316 0.17792417215349152 0.3506843016143491 -0.29689252737853311 -0.18878537627351777 -0.65025459107614703 0.3090534588949882 -1.0326736648657568;-0.17632781066684128 0.059918852642651614 0.98928847759421579 -0.35268516860445437 -0.37255735702626541 -0.6570457109127591 -0.026252573676922315 0.55783803460587522 0.59633635459324708 -0.81829112562405848;-0.0055393293797745893 0.67222975258754558 -0.15969344152923409 -0.81116901278421527 0.25343405045067185 0.16825872952176402 -0.31695999347351594 0.61225161655645166 -0.39676628082679716 1.2189724490684899;1.7038105139816848 -1.8956741271123836 -0.57391629408577471 0.283424699632222 -1.2367001472353778 -0.43407110144437883 0.95178403185940075 0.57605441812633129 -1.0533132727450278 -1.3967512589183215;1.4228956638769084 -0.18572186897256629 -0.35750526523528653 0.39496110786885441 -0.81427487934092968 -0.98223036111389039 1.6074221515893268 -1.1661888111531553 -0.96020564267164477 -0.45082124285728309;0.044372662658538252 -0.78666402610365138 -0.61575474984889123 -0.27374727825737022 0.070587880099282227 -0.72670813708220505 0.0028465528089769332 -0.6824423604987796 0.62049607847325416 -1.2300914504371085;0.37544051532934403 0.24202314458490359 0.57626478202667086 0.43040582730515464 -1.8180794419056818 -0.001373411424054307 0.36752451718012169 -0.46961607760395679 0.29784103754840086 0.70358514511481851;-0.079406906804916258 -0.69349921104359646 -0.90577802980029987 1.1960962922928435 -2.8628347120784028 1.4889969538672527 -0.46786270957795928 1.2127851190380914 0.12565325902847793 0.29105256058742962];

% Layer 2
b2 = [-1.4741588109563168;0.76536567396021338];
LW2_1 = [-2.5905853338547278 0.6375170965784267 -1.8375748038159363 -0.83829134548055673 -0.8612435136553227 2.1639659522951953 1.4598594413873371 -0.91185989278311574 0.49727807159995902 2.0826623211602495;2.3189891753733769 -1.6819676456928596 0.56404498059358466 -0.3139880266248028 -0.20491348752445407 -0.46895935302134295 -1.4996259796511382 1.3874064052611952 -1.5363789987719547 -1.7426805105954684];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
